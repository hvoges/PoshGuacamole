Function Set-GuacamoleUser2 {
    <#
    .SYNOPSIS
        Changes Guacamole User Settings
    .DESCRIPTION
    
    .EXAMPLE
        PS C:\> Set-GuacamoleUser -UserName Hans
        Returns the Connection-Settings for the Connection PC12
    .NOTES
        Author: Holger Voges
        Version: 1.0 
        Date: 2021-11-14
    #>  
      param(
          [Parameter(Mandatory,
          ValueFromPipelineByPropertyName)]      
          [string]$Username,
    
          [Parameter(ValueFromPipelineByPropertyName)]
          [Alias('guac-email-address')]
          [string]$EmailAddress,
    
          [Parameter(ValueFromPipelineByPropertyName)]
          $Disabled,
    
          [Parameter(ValueFromPipelineByPropertyName)]
          $Expired,
    
          # Hour and Minute of day
          [Parameter(ValueFromPipelineByPropertyName)]
          [Alias('access-window-start')]
          $StartTime,
    
          # Hour and Minute of day
          [Parameter(ValueFromPipelineByPropertyName)]
          [Alias('access-window-end')]
          $EndTime,
    
          # Startdate
          [Parameter(ValueFromPipelineByPropertyName)]
          [Alias('valid-from')]        
          $ValidFrom,
    
          # EndDate
          [Parameter(ValueFromPipelineByPropertyName)]        
          [Alias('valid-until')]
          $ValidUntil,
    
          [Parameter(ValueFromPipelineByPropertyName)]
          [String]$TimeZone = 'Europe/Berlin',
    
          [Parameter(ValueFromPipelineByPropertyName)]
          [Alias('guac-full-name')]
          [String]$Fullname,
          
          [Parameter(ValueFromPipelineByPropertyName)]
          [Alias('guac-organization')]
          [string]$Organization,
    
          [Parameter(ValueFromPipelineByPropertyName)]
          [Alias('guac-organizational-role')]
          [string]$OrganizationRole,
    
          [switch]$Passthru,
    
          $AuthToken = $Global:GuacAuthToken
      )
    
      Process {
    
        if ( $PSCmdlet.MyInvocation.PipelinePosition -eq 1 )
        {
            $EndPoint = '{0}/api/session/data/{1}/users/{3}?token={2}' -f $AuthToken.HostUrl,$AuthToken.datasource,$AuthToken.authToken,$Username
            $User = ( Invoke-WebRequest -Uri $EndPoint ).Content
        }
        Else {    
            $User = [ordered]@{
              username = $Username
              attributes = [ordered]@{
              }
            }
        }   

        $ParamList = @{}
        foreach ( $key in ($PSBoundParameters.Keys).GetEnumerator() )
        {
            if ( $PSBoundParameters[$key] )
            {
                if ( $key -in 'Starttime','EndTime','ValidFrom','ValidUntil') {
                    $ParamList.Add($key,[datetime]$PSBoundParameters[$key])
                }
                Else {
                    $ParamList.Add($key,$PSBoundParameters[$key])
                }
            }
        }
        
        $paramlist 
        
        Switch ($ParamList.Keys) {
          "EmailAddress"       { $User.attributes["guac-email-address"]       = $ParamList["EmailAddress"] }
          "Disabled"           { $User.attributes["disabled"]                 = $ParamList["Disabled"] }
          "Expired"            { $User.attributes["expired"]                  = $ParamList["Expired"] }
          "StartTime"          { $User.attributes["access-window-start"]      = ($ParamList["Starttime"]).ToString("T") }
          "EndTime"            { $User.attributes["access-window-end"]        = ($ParamList["EndTime"]).ToString("T") }
          "ValidFrom"          { $User.attributes["valid-from"]               = "{0:yyyy-MM-dd}" -f $ParamList["ValidFrom"] }
          "ValidUntil"         { $User.attributes["valid-until"]              = "{0:yyyy-MM-dd}" -f $ParamList["ValidUntil"] }
          "TimeZone"           { $User.attributes["timezone"]                 = $ParamList["TimeZone"] }
          "Fullname"           { $User.attributes["guac-full-name"]           = $ParamList["Fullname"] }
          "Organization"       { $User.attributes["guac-organization"]        = $ParamList["Organization"] }
          "OrganizationalRole" { $User.attributes["guac-organizational-role"] = $ParamList["OrganizationalRole"] }
        }    
        $UserProperties = $User | ConvertTo-Json
        $EndPoint = '{0}/api/session/data/{1}/users/{2}?token={3}' -f $AuthToken.HostUrl,$AuthToken.Datasource,$User.Username,$AuthToken.AuthToken
    
        Write-Verbose $Endpoint
        $UserProperties
        $Response = Invoke-WebRequest -Uri $EndPoint -Method Put -ContentType 'application/json' -Body $UserProperties
        If ( $Passthru ) {
          $Response
        }
      }
    }